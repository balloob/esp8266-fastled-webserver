uint16_t physicalToFibonacci[NUM_LEDS] = { 510, 476, 442, 408, 374, 340, 306, 272, 238, 204, 170, 136, 102, 68, 34, 0, 13, 47, 81, 115, 149, 183, 217, 251, 285, 319, 353, 387, 421, 455, 489, 502, 468, 434, 400, 366, 332, 298, 264, 230, 196, 162, 128, 94, 60, 26, 5, 39, 73, 107, 141, 175, 209, 243, 277, 311, 345, 379, 413, 447, 481, 494, 460, 426, 392, 358, 324, 290, 256, 222, 188, 154, 120, 86, 52, 18, 31, 65, 99, 133, 167, 201, 235, 269, 303, 337, 371, 405, 439, 473, 507, 486, 452, 418, 384, 350, 316, 282, 248, 214, 180, 146, 112, 78, 44, 10, 23, 57, 91, 125, 159, 193, 227, 261, 295, 329, 363, 397, 431, 465, 499, 478, 444, 410, 376, 342, 308, 274, 240, 206, 172, 138, 104, 70, 36, 2, 15, 49, 83, 117, 151, 185, 219, 253, 287, 321, 355, 389, 423, 457, 491, 504, 470, 436, 402, 368, 334, 300, 266, 232, 198, 164, 130, 96, 62, 28, 7, 41, 75, 109, 143, 177, 211, 245, 279, 313, 347, 381, 415, 449, 483, 496, 462, 428, 394, 360, 326, 292, 258, 224, 190, 156, 122, 88, 54, 20, 33, 67, 101, 135, 169, 203, 237, 271, 305, 339, 373, 407, 441, 475, 509, 488, 454, 420, 386, 352, 318, 284, 250, 216, 182, 148, 114, 80, 46, 12, 25, 59, 93, 127, 161, 195, 229, 263, 297, 331, 365, 399, 433, 467, 501, 480, 446, 412, 378, 344, 310, 276, 242, 208, 174, 140, 106, 72, 38, 4, 17, 51, 85, 119, 153, 187, 221, 255, 289, 323, 357, 391, 425, 459, 493, 506, 472, 438, 404, 370, 336, 302, 268, 234, 200, 166, 132, 98, 64, 30, 9, 43, 77, 111, 145, 179, 213, 247, 281, 315, 349, 383, 417, 451, 485, 498, 464, 430, 396, 362, 328, 294, 260, 226, 192, 158, 124, 90, 56, 22, 1, 35, 69, 103, 137, 171, 205, 239, 273, 307, 341, 375, 409, 443, 477, 511, 490, 456, 422, 388, 354, 320, 286, 252, 218, 184, 150, 116, 82, 48, 14, 27, 61, 95, 129, 163, 197, 231, 265, 299, 333, 367, 401, 435, 469, 503, 482, 448, 414, 380, 346, 312, 278, 244, 210, 176, 142, 108, 74, 40, 6, 19, 53, 87, 121, 155, 189, 223, 257, 291, 325, 359, 393, 427, 461, 495, 508, 474, 440, 406, 372, 338, 304, 270, 236, 202, 168, 134, 100, 66, 32, 11, 45, 79, 113, 147, 181, 215, 249, 283, 317, 351, 385, 419, 453, 487, 500, 466, 432, 398, 364, 330, 296, 262, 228, 194, 160, 126, 92, 58, 24, 3, 37, 71, 105, 139, 173, 207, 241, 275, 309, 343, 377, 411, 445, 479, 492, 458, 424, 390, 356, 322, 288, 254, 220, 186, 152, 118, 84, 50, 16, 29, 63, 97, 131, 165, 199, 233, 267, 301, 335, 369, 403, 437, 471, 505, 484, 450, 416, 382, 348, 314, 280, 246, 212, 178, 144, 110, 76, 42, 8, 21, 55, 89, 123, 157, 191, 225, 259, 293, 327, 361, 395, 429, 463, 497 };
uint16_t fibonacciToPhysical[NUM_LEDS] = { 15, 316, 135, 437, 255, 46, 376, 166, 496, 286, 105, 407, 225, 16, 346, 136, 466, 256, 75, 377, 195, 497, 315, 106, 436, 226, 45, 347, 165, 467, 285, 76, 406, 196, 14, 317, 134, 438, 254, 47, 375, 167, 495, 287, 104, 408, 224, 17, 345, 137, 465, 257, 74, 378, 194, 498, 314, 107, 435, 227, 44, 348, 164, 468, 284, 77, 405, 197, 13, 318, 133, 439, 253, 48, 374, 168, 494, 288, 103, 409, 223, 18, 344, 138, 464, 258, 73, 379, 193, 499, 313, 108, 434, 228, 43, 349, 163, 469, 283, 78, 404, 198, 12, 319, 132, 440, 252, 49, 373, 169, 493, 289, 102, 410, 222, 19, 343, 139, 463, 259, 72, 380, 192, 500, 312, 109, 433, 229, 42, 350, 162, 470, 282, 79, 403, 199, 11, 320, 131, 441, 251, 50, 372, 170, 492, 290, 101, 411, 221, 20, 342, 140, 462, 260, 71, 381, 191, 501, 311, 110, 432, 230, 41, 351, 161, 471, 281, 80, 402, 200, 10, 321, 130, 442, 250, 51, 371, 171, 491, 291, 100, 412, 220, 21, 341, 141, 461, 261, 70, 382, 190, 502, 310, 111, 431, 231, 40, 352, 160, 472, 280, 81, 401, 201, 9, 322, 129, 443, 249, 52, 370, 172, 490, 292, 99, 413, 219, 22, 340, 142, 460, 262, 69, 383, 189, 503, 309, 112, 430, 232, 39, 353, 159, 473, 279, 82, 400, 202, 8, 323, 128, 444, 248, 53, 369, 173, 489, 293, 98, 414, 218, 23, 339, 143, 459, 263, 68, 384, 188, 504, 308, 113, 429, 233, 38, 354, 158, 474, 278, 83, 399, 203, 7, 324, 127, 445, 247, 54, 368, 174, 488, 294, 97, 415, 217, 24, 338, 144, 458, 264, 67, 385, 187, 505, 307, 114, 428, 234, 37, 355, 157, 475, 277, 84, 398, 204, 6, 325, 126, 446, 246, 55, 367, 175, 487, 295, 96, 416, 216, 25, 337, 145, 457, 265, 66, 386, 186, 506, 306, 115, 427, 235, 36, 356, 156, 476, 276, 85, 397, 205, 5, 326, 125, 447, 245, 56, 366, 176, 486, 296, 95, 417, 215, 26, 336, 146, 456, 266, 65, 387, 185, 507, 305, 116, 426, 236, 35, 357, 155, 477, 275, 86, 396, 206, 4, 327, 124, 448, 244, 57, 365, 177, 485, 297, 94, 418, 214, 27, 335, 147, 455, 267, 64, 388, 184, 508, 304, 117, 425, 237, 34, 358, 154, 478, 274, 87, 395, 207, 3, 328, 123, 449, 243, 58, 364, 178, 484, 298, 93, 419, 213, 28, 334, 148, 454, 268, 63, 389, 183, 509, 303, 118, 424, 238, 33, 359, 153, 479, 273, 88, 394, 208, 2, 329, 122, 450, 242, 59, 363, 179, 483, 299, 92, 420, 212, 29, 333, 149, 453, 269, 62, 390, 182, 510, 302, 119, 423, 239, 32, 360, 152, 480, 272, 89, 393, 209, 1, 330, 121, 451, 241, 60, 362, 180, 482, 300, 91, 421, 211, 30, 332, 150, 452, 270, 61, 391, 181, 511, 301, 120, 422, 240, 31, 361, 151, 481, 271, 90, 392, 210, 0, 331 };
uint8_t coordsX[NUM_LEDS]              = { 170, 178, 185, 191, 196, 199, 202, 202, 202, 200, 196, 191, 184, 175, 161, 132, 148, 166, 176, 183, 188, 190, 192, 191, 190, 186, 182, 176, 170, 162, 153, 125, 136, 145, 154, 161, 168, 173, 177, 180, 181, 181, 178, 174, 167, 155, 139, 157, 164, 169, 170, 170, 168, 165, 160, 154, 147, 139, 129, 119, 109, 82, 93, 104, 114, 124, 132, 140, 147, 152, 157, 159, 160, 159, 155, 145, 145, 150, 150, 149, 146, 141, 135, 127, 119, 110, 100, 90, 79, 68, 57, 45, 56, 66, 77, 87, 97, 107, 115, 123, 130, 135, 139, 142, 141, 136, 134, 134, 131, 126, 120, 113, 105, 96, 86, 76, 66, 56, 45, 35, 25, 18, 27, 37, 47, 57, 67, 77, 86, 95, 104, 112, 119, 124, 128, 129, 125, 120, 113, 105, 97, 88, 78, 69, 59, 50, 40, 31, 22, 14, 6, 0, 6, 12, 19, 27, 35, 44, 54, 63, 73, 82, 91, 101, 109, 118, 121, 108, 98, 88, 78, 69, 59, 50, 41, 33, 25, 18, 12, 7, 3, 6, 8, 11, 15, 20, 26, 33, 40, 48, 57, 67, 77, 87, 98, 111, 102, 89, 77, 67, 58, 49, 41, 34, 28, 23, 19, 16, 15, 14, 15, 26, 24, 23, 24, 26, 28, 33, 38, 44, 51, 60, 69, 80, 93, 111, 100, 85, 73, 64, 55, 49, 43, 39, 36, 34, 33, 34, 36, 39, 43, 58, 53, 49, 45, 44, 43, 44, 46, 50, 55, 61, 69, 79, 93, 116, 104, 87, 76, 68, 62, 58, 55, 54, 54, 55, 58, 62, 68, 74, 82, 108, 99, 90, 83, 77, 72, 68, 65, 64, 65, 67, 70, 76, 85, 97, 112, 94, 85, 80, 76, 75, 75, 77, 81, 85, 91, 98, 106, 115, 125, 153, 142, 131, 122, 113, 105, 99, 93, 89, 87, 85, 86, 89, 95, 106, 123, 105, 99, 96, 96, 98, 101, 106, 112, 119, 128, 137, 147, 157, 168, 180, 193, 182, 171, 161, 151, 141, 133, 125, 118, 113, 108, 106, 106, 108, 115, 116, 114, 115, 118, 123, 129, 137, 145, 154, 164, 174, 184, 195, 206, 216, 226, 216, 205, 195, 185, 175, 165, 156, 147, 139, 133, 127, 123, 121, 124, 127, 129, 134, 141, 148, 156, 165, 174, 184, 194, 204, 214, 224, 233, 242, 253, 246, 238, 229, 221, 211, 202, 192, 182, 173, 164, 155, 147, 140, 133, 134, 142, 151, 160, 169, 179, 188, 198, 207, 216, 225, 233, 241, 247, 253, 255, 251, 247, 241, 234, 227, 219, 210, 201, 192, 182, 173, 163, 153, 142, 134, 151, 163, 174, 184, 194, 203, 212, 220, 227, 233, 239, 243, 247, 249, 242, 242, 241, 238, 235, 230, 225, 218, 211, 203, 194, 184, 173, 161, 146, 155, 170, 182, 192, 201, 208, 215, 221, 226, 229, 231, 232, 232, 231, 228, 215, 219, 221, 223, 223, 221, 219, 215, 210, 204, 197, 188, 177, 164, 144, 154, 170, 182, 191, 198, 204, 208, 211, 212, 213, 212, 209, 205, 200, 194 };
uint8_t coordsY[NUM_LEDS]              = { 6, 14, 22, 31, 41, 50, 60, 70, 80, 89, 98, 106, 114, 120, 125, 128, 124, 116, 109, 101, 92, 82, 73, 63, 54, 44, 35, 27, 18, 11, 4, 0, 5, 10, 17, 24, 32, 40, 49, 59, 68, 78, 87, 97, 106, 116, 121, 106, 95, 85, 75, 65, 56, 47, 38, 31, 24, 17, 12, 7, 4, 10, 10, 13, 16, 20, 25, 31, 39, 46, 55, 64, 74, 85, 96, 111, 101, 87, 76, 65, 56, 48, 41, 34, 29, 25, 21, 20, 19, 19, 21, 33, 30, 29, 28, 29, 31, 34, 39, 45, 51, 59, 69, 79, 92, 111, 101, 85, 73, 64, 56, 50, 45, 41, 39, 38, 38, 40, 43, 47, 52, 68, 62, 56, 53, 50, 49, 49, 50, 53, 57, 63, 70, 80, 94, 119, 106, 89, 78, 70, 65, 61, 59, 59, 60, 62, 66, 71, 77, 84, 92, 119, 109, 100, 92, 85, 80, 75, 72, 70, 70, 71, 74, 79, 87, 99, 114, 97, 88, 83, 81, 80, 81, 84, 88, 94, 100, 108, 116, 126, 136, 163, 152, 142, 132, 123, 114, 107, 101, 96, 93, 91, 91, 93, 98, 108, 108, 102, 101, 101, 104, 108, 114, 120, 128, 137, 146, 157, 167, 178, 190, 203, 192, 181, 170, 160, 150, 141, 133, 126, 119, 115, 111, 110, 111, 118, 119, 118, 120, 124, 130, 136, 144, 153, 162, 172, 182, 193, 203, 214, 224, 232, 223, 213, 202, 192, 182, 172, 163, 154, 146, 139, 132, 128, 125, 126, 129, 133, 139, 146, 154, 162, 172, 181, 191, 201, 210, 220, 229, 238, 246, 255, 249, 242, 234, 225, 216, 207, 197, 188, 178, 169, 160, 151, 143, 136, 135, 145, 155, 164, 174, 183, 193, 202, 211, 220, 228, 236, 243, 249, 254, 253, 250, 246, 242, 236, 229, 222, 213, 205, 196, 186, 176, 166, 155, 143, 133, 153, 166, 177, 187, 196, 205, 214, 221, 228, 234, 238, 242, 245, 246, 246, 236, 237, 237, 236, 233, 229, 225, 219, 212, 204, 195, 186, 175, 162, 146, 156, 171, 182, 192, 201, 208, 214, 220, 223, 226, 228, 228, 227, 224, 221, 207, 211, 215, 217, 218, 218, 216, 213, 209, 203, 196, 187, 177, 164, 142, 153, 170, 181, 190, 196, 201, 205, 207, 208, 207, 205, 202, 197, 191, 184, 159, 168, 176, 182, 188, 192, 195, 197, 197, 196, 193, 189, 182, 173, 160, 146, 164, 173, 180, 184, 186, 186, 185, 183, 179, 174, 167, 160, 151, 142, 114, 125, 135, 144, 152, 159, 165, 170, 173, 175, 176, 174, 171, 164, 153, 136, 154, 161, 164, 165, 164, 162, 157, 152, 145, 138, 129, 119, 109, 98, 72, 83, 94, 105, 114, 124, 132, 139, 145, 150, 153, 155, 155, 152, 143, 142, 146, 146, 143, 139, 134, 127, 119, 110, 101, 91, 81, 70, 59, 48, 37, 48, 58, 69, 79, 89, 99, 108, 116, 123, 129, 134, 137, 138, 134, 132, 130, 126, 121, 114, 106, 98, 88, 79, 69, 59, 48, 38, 29, 19 };
uint8_t angles[NUM_LEDS]               = { 205, 208, 211, 215, 218, 221, 225, 228, 231, 235, 238, 242, 245, 248, 252, 255, 246, 243, 239, 236, 233, 229, 226, 223, 219, 216, 213, 209, 206, 203, 199, 190, 194, 197, 200, 204, 207, 211, 214, 217, 221, 224, 227, 231, 234, 237, 232, 229, 225, 222, 219, 215, 212, 208, 205, 202, 198, 195, 192, 188, 185, 176, 180, 183, 186, 190, 193, 196, 200, 203, 206, 210, 213, 216, 220, 223, 214, 211, 208, 204, 201, 198, 194, 191, 188, 184, 181, 177, 174, 171, 167, 162, 165, 169, 172, 175, 179, 182, 185, 189, 192, 196, 199, 202, 206, 209, 200, 197, 193, 190, 187, 183, 180, 177, 173, 170, 167, 163, 160, 157, 153, 148, 151, 154, 158, 161, 165, 168, 171, 175, 178, 181, 185, 188, 191, 195, 186, 183, 179, 176, 173, 169, 166, 162, 159, 156, 152, 149, 146, 142, 139, 130, 133, 137, 140, 144, 147, 150, 154, 157, 160, 164, 167, 170, 174, 177, 172, 168, 165, 162, 158, 155, 152, 148, 145, 141, 138, 135, 131, 128, 125, 116, 119, 123, 126, 129, 133, 136, 139, 143, 146, 149, 153, 156, 160, 163, 154, 151, 147, 144, 141, 137, 134, 131, 127, 124, 121, 117, 114, 110, 107, 102, 105, 108, 112, 115, 118, 122, 125, 129, 132, 135, 139, 142, 145, 149, 140, 137, 133, 130, 126, 123, 120, 116, 113, 110, 106, 103, 100, 96, 93, 87, 91, 94, 98, 101, 104, 108, 111, 114, 118, 121, 124, 128, 131, 134, 126, 122, 119, 116, 112, 109, 106, 102, 99, 95, 92, 89, 85, 82, 79, 70, 73, 77, 80, 83, 87, 90, 93, 97, 100, 103, 107, 110, 114, 117, 111, 108, 105, 101, 98, 95, 91, 88, 85, 81, 78, 74, 71, 68, 64, 56, 59, 62, 66, 69, 72, 76, 79, 82, 86, 89, 93, 96, 99, 103, 97, 94, 90, 87, 84, 80, 77, 74, 70, 67, 64, 60, 57, 54, 50, 47, 41, 45, 48, 51, 55, 58, 62, 65, 68, 72, 75, 78, 82, 85, 88, 80, 76, 73, 70, 66, 63, 59, 56, 53, 49, 46, 43, 39, 36, 33, 27, 31, 34, 37, 41, 44, 47, 51, 54, 57, 61, 64, 67, 71, 74, 65, 62, 59, 55, 52, 49, 45, 42, 39, 35, 32, 28, 25, 22, 18, 10, 13, 16, 20, 23, 26, 30, 33, 36, 40, 43, 47, 50, 53, 57, 51, 48, 44, 41, 38, 34, 31, 28, 24, 21, 18, 14, 11, 8, 4, 251, 254, 2, 5, 9, 12, 16, 19, 22, 26, 29, 32, 36, 39, 42, 37, 34, 30, 27, 24, 20, 17, 13, 10, 7, 3, 0, 252, 249, 245, 236, 240, 243, 247, 250, 253, 1, 5, 8, 11, 15, 18, 21, 25, 28, 19, 16, 13, 9, 6, 3, 255, 251, 248, 244, 241, 238, 234, 231, 228, 222, 226, 229, 232, 236, 239, 242, 246, 249, 252, 0, 4, 7, 11, 14, 5, 2, 254, 250, 247, 244, 240, 237, 234, 230, 227, 223, 220, 217, 213 };
uint8_t radii[NUM_LEDS]                = { 255, 238, 221, 204, 187, 170, 153, 136, 119, 102, 85, 68, 51, 34, 17, 0, 6, 23, 40, 57, 74, 91, 108, 125, 142, 159, 176, 193, 210, 227, 244, 251, 234, 217, 200, 183, 166, 149, 132, 115, 98, 81, 64, 47, 30, 13, 2, 19, 36, 53, 70, 87, 104, 121, 138, 155, 172, 189, 206, 223, 240, 247, 230, 213, 196, 179, 162, 145, 128, 111, 94, 77, 60, 43, 26, 9, 15, 32, 49, 66, 83, 100, 117, 134, 151, 168, 185, 202, 219, 236, 253, 243, 226, 209, 192, 175, 158, 141, 124, 107, 90, 73, 56, 39, 22, 5, 11, 28, 45, 62, 79, 96, 113, 130, 147, 164, 181, 198, 215, 232, 249, 239, 222, 205, 188, 171, 154, 137, 120, 103, 86, 69, 52, 35, 18, 1, 7, 24, 41, 58, 75, 92, 109, 126, 143, 160, 177, 194, 211, 228, 245, 252, 235, 218, 201, 184, 167, 150, 133, 116, 99, 82, 65, 48, 31, 14, 3, 20, 37, 54, 71, 88, 105, 122, 139, 156, 173, 190, 207, 224, 241, 248, 231, 214, 197, 180, 163, 146, 129, 112, 95, 78, 61, 44, 27, 10, 16, 33, 50, 67, 84, 101, 118, 135, 152, 169, 186, 203, 220, 237, 254, 244, 227, 210, 193, 176, 159, 142, 125, 108, 91, 74, 57, 40, 23, 6, 12, 29, 46, 63, 80, 97, 114, 131, 148, 165, 182, 199, 216, 233, 250, 240, 223, 206, 189, 172, 155, 138, 121, 104, 87, 70, 53, 36, 19, 2, 8, 25, 42, 59, 76, 93, 110, 127, 144, 161, 178, 195, 212, 229, 246, 253, 236, 219, 202, 185, 168, 151, 134, 117, 100, 83, 66, 49, 32, 15, 4, 21, 38, 55, 72, 89, 106, 123, 140, 157, 174, 191, 208, 225, 242, 249, 232, 215, 198, 181, 164, 147, 130, 113, 96, 79, 62, 45, 28, 11, 0, 17, 34, 51, 68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255, 245, 228, 211, 194, 177, 160, 143, 126, 109, 92, 75, 58, 41, 24, 7, 13, 30, 47, 64, 81, 98, 115, 132, 149, 166, 183, 200, 217, 234, 251, 241, 224, 207, 190, 173, 156, 139, 122, 105, 88, 71, 54, 37, 20, 3, 9, 26, 43, 60, 77, 94, 111, 128, 145, 162, 179, 196, 213, 230, 247, 254, 237, 220, 203, 186, 169, 152, 135, 118, 101, 84, 67, 50, 33, 16, 5, 22, 39, 56, 73, 90, 107, 124, 141, 158, 175, 192, 209, 226, 243, 250, 233, 216, 199, 182, 165, 148, 131, 114, 97, 80, 63, 46, 29, 12, 1, 18, 35, 52, 69, 86, 103, 120, 137, 154, 171, 188, 205, 222, 239, 246, 229, 212, 195, 178, 161, 144, 127, 110, 93, 76, 59, 42, 25, 8, 14, 31, 48, 65, 82, 99, 116, 133, 150, 167, 184, 201, 218, 235, 252, 242, 225, 208, 191, 174, 157, 140, 123, 106, 89, 72, 55, 38, 21, 4, 10, 27, 44, 61, 78, 95, 112, 129, 146, 163, 180, 197, 214, 231, 248 };

// Fibonacci512 Mini maps, incorrect on Fibonacci512 (320mm). XY coords look really cool with 'Y Axis Gradient Palette', like a yin-yang symbol turning itself inside out
// uint16_t physicalToFibonacci[NUM_LEDS] = { 0, 34, 68, 102, 136, 170, 204, 238, 272, 306, 340, 374, 408, 442, 476, 510, 489, 455, 421, 387, 353, 319, 285, 251, 217, 183, 149, 115, 81, 47, 13, 26, 60, 94, 128, 162, 196, 230, 264, 298, 332, 366, 400, 434, 468, 502, 481, 447, 413, 379, 345, 311, 277, 243, 209, 175, 141, 107, 73, 39, 5, 18, 52, 86, 120, 154, 188, 222, 256, 290, 324, 358, 392, 426, 460, 494, 507, 473, 439, 405, 371, 337, 303, 269, 235, 201, 167, 133, 99, 65, 31, 10, 44, 78, 112, 146, 180, 214, 248, 282, 316, 350, 384, 418, 452, 486, 499, 465, 431, 397, 363, 329, 295, 261, 227, 193, 159, 125, 91, 57, 23, 2, 36, 70, 104, 138, 172, 206, 240, 274, 308, 342, 376, 410, 444, 478, 491, 457, 423, 389, 355, 321, 287, 253, 219, 185, 151, 117, 83, 49, 15, 28, 62, 96, 130, 164, 198, 232, 266, 300, 334, 368, 402, 436, 470, 504, 483, 449, 415, 381, 347, 313, 279, 245, 211, 177, 143, 109, 75, 41, 7, 20, 54, 88, 122, 156, 190, 224, 258, 292, 326, 360, 394, 428, 462, 496, 509, 475, 441, 407, 373, 339, 305, 271, 237, 203, 169, 135, 101, 67, 33, 12, 46, 80, 114, 148, 182, 216, 250, 284, 318, 352, 386, 420, 454, 488, 501, 467, 433, 399, 365, 331, 297, 263, 229, 195, 161, 127, 93, 59, 25, 4, 38, 72, 106, 140, 174, 208, 242, 276, 310, 344, 378, 412, 446, 480, 493, 459, 425, 391, 357, 323, 289, 255, 221, 187, 153, 119, 85, 51, 17, 30, 64, 98, 132, 166, 200, 234, 268, 302, 336, 370, 404, 438, 472, 506, 485, 451, 417, 383, 349, 315, 281, 247, 213, 179, 145, 111, 77, 43, 9, 22, 56, 90, 124, 158, 192, 226, 260, 294, 328, 362, 396, 430, 464, 498, 511, 477, 443, 409, 375, 341, 307, 273, 239, 205, 171, 137, 103, 69, 35, 1, 14, 48, 82, 116, 150, 184, 218, 252, 286, 320, 354, 388, 422, 456, 490, 503, 469, 435, 401, 367, 333, 299, 265, 231, 197, 163, 129, 95, 61, 27, 6, 40, 74, 108, 142, 176, 210, 244, 278, 312, 346, 380, 414, 448, 482, 495, 461, 427, 393, 359, 325, 291, 257, 223, 189, 155, 121, 87, 53, 19, 32, 66, 100, 134, 168, 202, 236, 270, 304, 338, 372, 406, 440, 474, 508, 487, 453, 419, 385, 351, 317, 283, 249, 215, 181, 147, 113, 79, 45, 11, 24, 58, 92, 126, 160, 194, 228, 262, 296, 330, 364, 398, 432, 466, 500, 479, 445, 411, 377, 343, 309, 275, 241, 207, 173, 139, 105, 71, 37, 3, 16, 50, 84, 118, 152, 186, 220, 254, 288, 322, 356, 390, 424, 458, 492, 505, 471, 437, 403, 369, 335, 301, 267, 233, 199, 165, 131, 97, 63, 29, 8, 42, 76, 110, 144, 178, 212, 246, 280, 314, 348, 382, 416, 450, 484, 497, 463, 429, 395, 361, 327, 293, 259, 225, 191, 157, 123, 89, 55, 21 };
// uint16_t fibonacciToPhysical[NUM_LEDS] = { 0, 331, 121, 451, 241, 60, 362, 180, 482, 300, 91, 421, 211, 30, 332, 150, 452, 270, 61, 391, 181, 511, 301, 120, 422, 240, 31, 361, 151, 481, 271, 90, 392, 210, 1, 330, 122, 450, 242, 59, 363, 179, 483, 299, 92, 420, 212, 29, 333, 149, 453, 269, 62, 390, 182, 510, 302, 119, 423, 239, 32, 360, 152, 480, 272, 89, 393, 209, 2, 329, 123, 449, 243, 58, 364, 178, 484, 298, 93, 419, 213, 28, 334, 148, 454, 268, 63, 389, 183, 509, 303, 118, 424, 238, 33, 359, 153, 479, 273, 88, 394, 208, 3, 328, 124, 448, 244, 57, 365, 177, 485, 297, 94, 418, 214, 27, 335, 147, 455, 267, 64, 388, 184, 508, 304, 117, 425, 237, 34, 358, 154, 478, 274, 87, 395, 207, 4, 327, 125, 447, 245, 56, 366, 176, 486, 296, 95, 417, 215, 26, 336, 146, 456, 266, 65, 387, 185, 507, 305, 116, 426, 236, 35, 357, 155, 477, 275, 86, 396, 206, 5, 326, 126, 446, 246, 55, 367, 175, 487, 295, 96, 416, 216, 25, 337, 145, 457, 265, 66, 386, 186, 506, 306, 115, 427, 235, 36, 356, 156, 476, 276, 85, 397, 205, 6, 325, 127, 445, 247, 54, 368, 174, 488, 294, 97, 415, 217, 24, 338, 144, 458, 264, 67, 385, 187, 505, 307, 114, 428, 234, 37, 355, 157, 475, 277, 84, 398, 204, 7, 324, 128, 444, 248, 53, 369, 173, 489, 293, 98, 414, 218, 23, 339, 143, 459, 263, 68, 384, 188, 504, 308, 113, 429, 233, 38, 354, 158, 474, 278, 83, 399, 203, 8, 323, 129, 443, 249, 52, 370, 172, 490, 292, 99, 413, 219, 22, 340, 142, 460, 262, 69, 383, 189, 503, 309, 112, 430, 232, 39, 353, 159, 473, 279, 82, 400, 202, 9, 322, 130, 442, 250, 51, 371, 171, 491, 291, 100, 412, 220, 21, 341, 141, 461, 261, 70, 382, 190, 502, 310, 111, 431, 231, 40, 352, 160, 472, 280, 81, 401, 201, 10, 321, 131, 441, 251, 50, 372, 170, 492, 290, 101, 411, 221, 20, 342, 140, 462, 260, 71, 381, 191, 501, 311, 110, 432, 230, 41, 351, 161, 471, 281, 80, 402, 200, 11, 320, 132, 440, 252, 49, 373, 169, 493, 289, 102, 410, 222, 19, 343, 139, 463, 259, 72, 380, 192, 500, 312, 109, 433, 229, 42, 350, 162, 470, 282, 79, 403, 199, 12, 319, 133, 439, 253, 48, 374, 168, 494, 288, 103, 409, 223, 18, 344, 138, 464, 258, 73, 379, 193, 499, 313, 108, 434, 228, 43, 349, 163, 469, 283, 78, 404, 198, 13, 318, 134, 438, 254, 47, 375, 167, 495, 287, 104, 408, 224, 17, 345, 137, 465, 257, 74, 378, 194, 498, 314, 107, 435, 227, 44, 348, 164, 468, 284, 77, 405, 197, 14, 317, 135, 437, 255, 46, 376, 166, 496, 286, 105, 407, 225, 16, 346, 136, 466, 256, 75, 377, 195, 497, 315, 106, 436, 226, 45, 347, 165, 467, 285, 76, 406, 196, 15, 316 };
// uint8_t coordsX[NUM_LEDS]              = { 132, 161, 175, 184, 191, 196, 200, 202, 202, 202, 199, 196, 191, 185, 178, 170, 153, 162, 170, 176, 182, 186, 190, 191, 192, 190, 188, 183, 176, 166, 148, 155, 167, 174, 178, 181, 181, 180, 177, 173, 168, 161, 154, 145, 136, 125, 109, 119, 129, 139, 147, 154, 160, 165, 168, 170, 170, 169, 164, 157, 139, 145, 155, 159, 160, 159, 157, 152, 147, 140, 132, 124, 114, 104, 93, 82, 57, 68, 79, 90, 100, 110, 119, 127, 135, 141, 146, 149, 150, 150, 145, 136, 141, 142, 139, 135, 130, 123, 115, 107, 97, 87, 77, 66, 56, 45, 25, 35, 45, 56, 66, 76, 86, 96, 105, 113, 120, 126, 131, 134, 134, 129, 128, 124, 119, 112, 104, 95, 86, 77, 67, 57, 47, 37, 27, 18, 6, 14, 22, 31, 40, 50, 59, 69, 78, 88, 97, 105, 113, 120, 125, 118, 109, 101, 91, 82, 73, 63, 54, 44, 35, 27, 19, 12, 6, 0, 3, 7, 12, 18, 25, 33, 41, 50, 59, 69, 78, 88, 98, 108, 121, 111, 98, 87, 77, 67, 57, 48, 40, 33, 26, 20, 15, 11, 8, 6, 15, 14, 15, 16, 19, 23, 28, 34, 41, 49, 58, 67, 77, 89, 102, 111, 93, 80, 69, 60, 51, 44, 38, 33, 28, 26, 24, 23, 24, 26, 43, 39, 36, 34, 33, 34, 36, 39, 43, 49, 55, 64, 73, 85, 100, 116, 93, 79, 69, 61, 55, 50, 46, 44, 43, 44, 45, 49, 53, 58, 82, 74, 68, 62, 58, 55, 54, 54, 55, 58, 62, 68, 76, 87, 104, 97, 85, 76, 70, 67, 65, 64, 65, 68, 72, 77, 83, 90, 99, 108, 125, 115, 106, 98, 91, 85, 81, 77, 75, 75, 76, 80, 85, 94, 112, 106, 95, 89, 86, 85, 87, 89, 93, 99, 105, 113, 122, 131, 142, 153, 180, 168, 157, 147, 137, 128, 119, 112, 106, 101, 98, 96, 96, 99, 105, 123, 115, 108, 106, 106, 108, 113, 118, 125, 133, 141, 151, 161, 171, 182, 193, 216, 206, 195, 184, 174, 164, 154, 145, 137, 129, 123, 118, 115, 114, 116, 124, 121, 123, 127, 133, 139, 147, 156, 165, 175, 185, 195, 205, 216, 226, 242, 233, 224, 214, 204, 194, 184, 174, 165, 156, 148, 141, 134, 129, 127, 133, 140, 147, 155, 164, 173, 182, 192, 202, 211, 221, 229, 238, 246, 253, 253, 247, 241, 233, 225, 216, 207, 198, 188, 179, 169, 160, 151, 142, 134, 142, 153, 163, 173, 182, 192, 201, 210, 219, 227, 234, 241, 247, 251, 255, 249, 247, 243, 239, 233, 227, 220, 212, 203, 194, 184, 174, 163, 151, 134, 146, 161, 173, 184, 194, 203, 211, 218, 225, 230, 235, 238, 241, 242, 242, 228, 231, 232, 232, 231, 229, 226, 221, 215, 208, 201, 192, 182, 170, 155, 144, 164, 177, 188, 197, 204, 210, 215, 219, 221, 223, 223, 221, 219, 215, 194, 200, 205, 209, 212, 213, 212, 211, 208, 204, 198, 191, 182, 170, 154 };
// uint8_t coordsY[NUM_LEDS]              = { 128, 125, 120, 114, 106, 98, 89, 80, 70, 60, 50, 41, 31, 22, 14, 6, 4, 11, 18, 27, 35, 44, 54, 63, 73, 82, 92, 101, 109, 116, 124, 116, 106, 97, 87, 78, 68, 59, 49, 40, 32, 24, 17, 10, 5, 0, 4, 7, 12, 17, 24, 31, 38, 47, 56, 65, 75, 85, 95, 106, 121, 111, 96, 85, 74, 64, 55, 46, 39, 31, 25, 20, 16, 13, 10, 10, 21, 19, 19, 20, 21, 25, 29, 34, 41, 48, 56, 65, 76, 87, 101, 111, 92, 79, 69, 59, 51, 45, 39, 34, 31, 29, 28, 29, 30, 33, 52, 47, 43, 40, 38, 38, 39, 41, 45, 50, 56, 64, 73, 85, 101, 119, 94, 80, 70, 63, 57, 53, 50, 49, 49, 50, 53, 56, 62, 68, 92, 84, 77, 71, 66, 62, 60, 59, 59, 61, 65, 70, 78, 89, 106, 99, 87, 79, 74, 71, 70, 70, 72, 75, 80, 85, 92, 100, 109, 119, 136, 126, 116, 108, 100, 94, 88, 84, 81, 80, 81, 83, 88, 97, 114, 108, 98, 93, 91, 91, 93, 96, 101, 107, 114, 123, 132, 142, 152, 163, 190, 178, 167, 157, 146, 137, 128, 120, 114, 108, 104, 101, 101, 102, 108, 118, 111, 110, 111, 115, 119, 126, 133, 141, 150, 160, 170, 181, 192, 203, 224, 214, 203, 193, 182, 172, 162, 153, 144, 136, 130, 124, 120, 118, 119, 126, 125, 128, 132, 139, 146, 154, 163, 172, 182, 192, 202, 213, 223, 232, 246, 238, 229, 220, 210, 201, 191, 181, 172, 162, 154, 146, 139, 133, 129, 136, 143, 151, 160, 169, 178, 188, 197, 207, 216, 225, 234, 242, 249, 255, 254, 249, 243, 236, 228, 220, 211, 202, 193, 183, 174, 164, 155, 145, 135, 143, 155, 166, 176, 186, 196, 205, 213, 222, 229, 236, 242, 246, 250, 253, 246, 246, 245, 242, 238, 234, 228, 221, 214, 205, 196, 187, 177, 166, 153, 133, 146, 162, 175, 186, 195, 204, 212, 219, 225, 229, 233, 236, 237, 237, 236, 221, 224, 227, 228, 228, 226, 223, 220, 214, 208, 201, 192, 182, 171, 156, 142, 164, 177, 187, 196, 203, 209, 213, 216, 218, 218, 217, 215, 211, 207, 184, 191, 197, 202, 205, 207, 208, 207, 205, 201, 196, 190, 181, 170, 153, 160, 173, 182, 189, 193, 196, 197, 197, 195, 192, 188, 182, 176, 168, 159, 142, 151, 160, 167, 174, 179, 183, 185, 186, 186, 184, 180, 173, 164, 146, 153, 164, 171, 174, 176, 175, 173, 170, 165, 159, 152, 144, 135, 125, 114, 98, 109, 119, 129, 138, 145, 152, 157, 162, 164, 165, 164, 161, 154, 136, 143, 152, 155, 155, 153, 150, 145, 139, 132, 124, 114, 105, 94, 83, 72, 48, 59, 70, 81, 91, 101, 110, 119, 127, 134, 139, 143, 146, 146, 142, 134, 138, 137, 134, 129, 123, 116, 108, 99, 89, 79, 69, 58, 48, 37, 19, 29, 38, 48, 59, 69, 79, 88, 98, 106, 114, 121, 126, 130, 132 };
// uint8_t angles[NUM_LEDS]               = { 255, 252, 248, 245, 242, 238, 235, 231, 228, 225, 221, 218, 215, 211, 208, 205, 199, 203, 206, 209, 213, 216, 219, 223, 226, 229, 233, 236, 239, 243, 246, 237, 234, 231, 227, 224, 221, 217, 214, 211, 207, 204, 200, 197, 194, 190, 185, 188, 192, 195, 198, 202, 205, 208, 212, 215, 219, 222, 225, 229, 232, 223, 220, 216, 213, 210, 206, 203, 200, 196, 193, 190, 186, 183, 180, 176, 167, 171, 174, 177, 181, 184, 188, 191, 194, 198, 201, 204, 208, 211, 214, 209, 206, 202, 199, 196, 192, 189, 185, 182, 179, 175, 172, 169, 165, 162, 153, 157, 160, 163, 167, 170, 173, 177, 180, 183, 187, 190, 193, 197, 200, 195, 191, 188, 185, 181, 178, 175, 171, 168, 165, 161, 158, 154, 151, 148, 139, 142, 146, 149, 152, 156, 159, 162, 166, 169, 173, 176, 179, 183, 186, 177, 174, 170, 167, 164, 160, 157, 154, 150, 147, 144, 140, 137, 133, 130, 125, 128, 131, 135, 138, 141, 145, 148, 152, 155, 158, 162, 165, 168, 172, 163, 160, 156, 153, 149, 146, 143, 139, 136, 133, 129, 126, 123, 119, 116, 107, 110, 114, 117, 121, 124, 127, 131, 134, 137, 141, 144, 147, 151, 154, 149, 145, 142, 139, 135, 132, 129, 125, 122, 118, 115, 112, 108, 105, 102, 93, 96, 100, 103, 106, 110, 113, 116, 120, 123, 126, 130, 133, 137, 140, 134, 131, 128, 124, 121, 118, 114, 111, 108, 104, 101, 98, 94, 91, 87, 79, 82, 85, 89, 92, 95, 99, 102, 106, 109, 112, 116, 119, 122, 126, 117, 114, 110, 107, 103, 100, 97, 93, 90, 87, 83, 80, 77, 73, 70, 64, 68, 71, 74, 78, 81, 85, 88, 91, 95, 98, 101, 105, 108, 111, 103, 99, 96, 93, 89, 86, 82, 79, 76, 72, 69, 66, 62, 59, 56, 47, 50, 54, 57, 60, 64, 67, 70, 74, 77, 80, 84, 87, 90, 94, 97, 88, 85, 82, 78, 75, 72, 68, 65, 62, 58, 55, 51, 48, 45, 41, 33, 36, 39, 43, 46, 49, 53, 56, 59, 63, 66, 70, 73, 76, 80, 74, 71, 67, 64, 61, 57, 54, 51, 47, 44, 41, 37, 34, 31, 27, 18, 22, 25, 28, 32, 35, 39, 42, 45, 49, 52, 55, 59, 62, 65, 57, 53, 50, 47, 43, 40, 36, 33, 30, 26, 23, 20, 16, 13, 10, 4, 8, 11, 14, 18, 21, 24, 28, 31, 34, 38, 41, 44, 48, 51, 42, 39, 36, 32, 29, 26, 22, 19, 16, 12, 9, 5, 2, 254, 251, 245, 249, 252, 0, 3, 7, 10, 13, 17, 20, 24, 27, 30, 34, 37, 28, 25, 21, 18, 15, 11, 8, 5, 1, 253, 250, 247, 243, 240, 236, 228, 231, 234, 238, 241, 244, 248, 251, 255, 3, 6, 9, 13, 16, 19, 14, 11, 7, 4, 0, 252, 249, 246, 242, 239, 236, 232, 229, 226, 222, 213, 217, 220, 223, 227, 230, 234, 237, 240, 244, 247, 250, 254, 2, 5 };
// uint8_t radii[NUM_LEDS]                = { 0, 17, 34, 51, 68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255, 244, 227, 210, 193, 176, 159, 142, 125, 108, 91, 74, 57, 40, 23, 6, 13, 30, 47, 64, 81, 98, 115, 132, 149, 166, 183, 200, 217, 234, 251, 240, 223, 206, 189, 172, 155, 138, 121, 104, 87, 70, 53, 36, 19, 2, 9, 26, 43, 60, 77, 94, 111, 128, 145, 162, 179, 196, 213, 230, 247, 253, 236, 219, 202, 185, 168, 151, 134, 117, 100, 83, 66, 49, 32, 15, 5, 22, 39, 56, 73, 90, 107, 124, 141, 158, 175, 192, 209, 226, 243, 249, 232, 215, 198, 181, 164, 147, 130, 113, 96, 79, 62, 45, 28, 11, 1, 18, 35, 52, 69, 86, 103, 120, 137, 154, 171, 188, 205, 222, 239, 245, 228, 211, 194, 177, 160, 143, 126, 109, 92, 75, 58, 41, 24, 7, 14, 31, 48, 65, 82, 99, 116, 133, 150, 167, 184, 201, 218, 235, 252, 241, 224, 207, 190, 173, 156, 139, 122, 105, 88, 71, 54, 37, 20, 3, 10, 27, 44, 61, 78, 95, 112, 129, 146, 163, 180, 197, 214, 231, 248, 254, 237, 220, 203, 186, 169, 152, 135, 118, 101, 84, 67, 50, 33, 16, 6, 23, 40, 57, 74, 91, 108, 125, 142, 159, 176, 193, 210, 227, 244, 250, 233, 216, 199, 182, 165, 148, 131, 114, 97, 80, 63, 46, 29, 12, 2, 19, 36, 53, 70, 87, 104, 121, 138, 155, 172, 189, 206, 223, 240, 246, 229, 212, 195, 178, 161, 144, 127, 110, 93, 76, 59, 42, 25, 8, 15, 32, 49, 66, 83, 100, 117, 134, 151, 168, 185, 202, 219, 236, 253, 242, 225, 208, 191, 174, 157, 140, 123, 106, 89, 72, 55, 38, 21, 4, 11, 28, 45, 62, 79, 96, 113, 130, 147, 164, 181, 198, 215, 232, 249, 255, 238, 221, 204, 187, 170, 153, 136, 119, 102, 85, 68, 51, 34, 17, 0, 7, 24, 41, 58, 75, 92, 109, 126, 143, 160, 177, 194, 211, 228, 245, 251, 234, 217, 200, 183, 166, 149, 132, 115, 98, 81, 64, 47, 30, 13, 3, 20, 37, 54, 71, 88, 105, 122, 139, 156, 173, 190, 207, 224, 241, 247, 230, 213, 196, 179, 162, 145, 128, 111, 94, 77, 60, 43, 26, 9, 16, 33, 50, 67, 84, 101, 118, 135, 152, 169, 186, 203, 220, 237, 254, 243, 226, 209, 192, 175, 158, 141, 124, 107, 90, 73, 56, 39, 22, 5, 12, 29, 46, 63, 80, 97, 114, 131, 148, 165, 182, 199, 216, 233, 250, 239, 222, 205, 188, 171, 154, 137, 120, 103, 86, 69, 52, 35, 18, 1, 8, 25, 42, 59, 76, 93, 110, 127, 144, 161, 178, 195, 212, 229, 246, 252, 235, 218, 201, 184, 167, 150, 133, 116, 99, 82, 65, 48, 31, 14, 4, 21, 38, 55, 72, 89, 106, 123, 140, 157, 174, 191, 208, 225, 242, 248, 231, 214, 197, 180, 163, 146, 129, 112, 95, 78, 61, 44, 27, 10 };

void drawSpiralLine(uint8_t angle, int step, CRGB color)
{
  int startIndex = 0;
  int smallestAngleDifference = 255;

  // find the outermost led closest to the desired angle
  for (int i = 0; i < NUM_LEDS; i++) {
    int j = physicalToFibonacci[i];
    if (j < step) continue;
    if (!(j + step >= NUM_LEDS)) continue; // not outermost
    uint8_t a = angles[i];
    if (a == angle) startIndex = i;
    else if (angle - a > 0 && angle - a < smallestAngleDifference) {
      smallestAngleDifference = angle - a;
      startIndex = i;
    }
  }

  // draw the starting LED
  leds[startIndex] += color;

  // draw to center from outer start
  int f = physicalToFibonacci[startIndex];
  while (f - step >= 0 && f - step < NUM_LEDS) {
    leds[fibonacciToPhysical[f]] += color;
    f = f - step;
  }
}

void setPixelAR(uint8_t angle, uint8_t dAngle, uint8_t radius, uint8_t dRadius, CRGB color)
{
  uint16_t amax = qadd8(angle, dAngle);
  uint8_t amin = qsub8(angle, dAngle);

  uint16_t rmax = qadd8(radius, dRadius);
  uint16_t rmin = qsub8(radius, dRadius);

  for (uint16_t i = 0; i < NUM_LEDS; i++) {
    uint8_t o = i;

    uint8_t ao = angles[o];

    if (ao <= amax && ao >= amin) {
      uint8_t ro = physicalToFibonacci[o];

      if (ro <= rmax && ro >= rmin) {
        leds[i] = color;
      }
    }
  }
}

void andPixelAR(uint8_t angle, uint8_t dAngle, uint8_t startRadius, uint8_t endRadius, CRGB color)
{
  uint16_t amax = qadd8(angle, dAngle);
  uint8_t amin = qsub8(angle, dAngle);

  for (uint16_t i = 0; i < NUM_LEDS; i++) {
    uint8_t o = i;

    uint8_t ao = angles[o];

    if (ao <= amax && ao >= amin) {
      uint8_t ro = physicalToFibonacci[o];

      if (ro <= endRadius && ro >= startRadius) {
        leds[i] += color;
      }
    }
  }
}

void antialiasPixelAR(uint8_t angle, uint8_t dAngle, uint8_t startRadius, uint8_t endRadius, CRGB color, CRGB leds[] = leds, int _NUM_LEDS = NUM_LEDS)
{
  for (uint16_t i = 0; i < _NUM_LEDS; i++) {
    uint8_t o = i;

    uint8_t ao = angles[o];

    uint8_t adiff = min(sub8(ao,angle), sub8(angle, ao));
    uint8_t fade = map(adiff, 0, dAngle, 0, 255);
    CRGB faded = color;
    faded.fadeToBlackBy(fade);

    if (adiff <= dAngle) {
      uint8_t ro = physicalToFibonacci[o];

      if (ro <= endRadius && ro >= startRadius) {
        leds[i] += faded;
      }
    }
  }
}

void anglePalette() {
  uint16_t hues = 1;

  for (uint16_t i = 0; i < NUM_LEDS; i++) {
    uint16_t x = angles[i];

    leds[i] = ColorFromPalette(palettes[currentPaletteIndex], beat8(speed) - (x * hues));
  }
}

void radiusPalette() {
  uint16_t hues = 1;

  for (uint16_t i = 0; i < NUM_LEDS; i++) {
    uint16_t r = radii[i];

    leds[i] = ColorFromPalette(palettes[currentPaletteIndex], beat8(speed) - (r * hues));
  }
}

void xPalette() {
  uint16_t hues = 1;

  for (uint16_t i = 0; i < NUM_LEDS; i++) {
    uint16_t x = coordsX[i];

    leds[i] = ColorFromPalette(palettes[currentPaletteIndex], beat8(speed) - (x * hues));
  }
}

void yPalette() {
  uint16_t hues = 1;

  for (uint16_t i = 0; i < NUM_LEDS; i++) {
    uint16_t y = coordsY[i];

    leds[i] = ColorFromPalette(palettes[currentPaletteIndex], beat8(speed) - (y * hues));
  }
}

void xyPalette() {
  uint16_t hues = 1;

  for (uint16_t i = 0; i < NUM_LEDS; i++) {
    uint16_t x = coordsX[i];
    uint16_t y = coordsY[i];

    leds[i] = ColorFromPalette(palettes[currentPaletteIndex], beat8(speed) - ((x + y) * hues));
  }
}

void angleGradientPalette() {
  uint16_t hues = 1;

  for (uint16_t i = 0; i < NUM_LEDS; i++) {
    uint16_t x = angles[i];

    leds[i] = ColorFromPalette(gCurrentPalette, beat8(speed) - (x * hues));
  }
}

void radiusGradientPalette() {
  uint16_t hues = 1;

  for (uint16_t i = 0; i < NUM_LEDS; i++) {
    uint16_t r = radii[i];

    leds[i] = ColorFromPalette(gCurrentPalette, beat8(speed) - (r * hues));
  }
}

void xGradientPalette() {
  uint16_t hues = 1;

  for (uint16_t i = 0; i < NUM_LEDS; i++) {
    uint16_t x = coordsX[i];

    leds[i] = ColorFromPalette(gCurrentPalette, beat8(speed) - (x * hues));
  }
}

void yGradientPalette() {
  uint16_t hues = 1;

  for (uint16_t i = 0; i < NUM_LEDS; i++) {
    uint16_t y = coordsY[i];

    leds[i] = ColorFromPalette(gCurrentPalette, beat8(speed) - (y * hues));
  }
}

void xyGradientPalette() {
  uint16_t hues = 1;

  for (uint16_t i = 0; i < NUM_LEDS; i++) {
    uint16_t x = coordsX[i];
    uint16_t y = coordsY[i];

    leds[i] = ColorFromPalette(gCurrentPalette, beat8(speed) - ((x + y) * hues));
  }
}

void drawAnalogClock() {
  float second = timeClient.getSeconds();
  float minute = timeClient.getMinutes() + (second / 60.0);
  float hour = timeClient.getHours() + (minute / 60.0);

  const uint8_t hourRadius = 96;
  const uint8_t minuteRadius = 192;
  const uint8_t secondRadius = 255;

  const uint8_t hourHandWidth = 8;
  const uint8_t minuteHandWidth = 7;
  const uint8_t secondHandWidth = 6;

  const float degreesPerSecond = 255.0 / 60.0;
  const float degreesPerMinute = 255.0 / 60.0;
  const float degreesPerHour = 255.0 / 12.0;

  static uint8_t hourAngle = 255 - hour * degreesPerHour;
  static uint8_t minuteAngle = 255 - minute * degreesPerMinute;
  static uint8_t secondAngle = 255 - second * degreesPerSecond;

  EVERY_N_MILLIS(100) {
    hourAngle = 255 - hour * degreesPerHour;
    minuteAngle = 255 - minute * degreesPerMinute;
    secondAngle = 255 - second * degreesPerSecond;
  }

  fadeToBlackBy(leds, NUM_LEDS, clockBackgroundFade);

  antialiasPixelAR(secondAngle, secondHandWidth, 0, secondRadius, CRGB::Blue);
  antialiasPixelAR(minuteAngle, minuteHandWidth, 0, minuteRadius, CRGB::Green);
  antialiasPixelAR(hourAngle, hourHandWidth, 0, hourRadius, CRGB::Red);
  leds[0] = CRGB::Red;
}

void drawSpiralAnalogClock(uint8_t step) {
  float second = timeClient.getSeconds();
  float minute = timeClient.getMinutes() + (second / 60.0);
  float hour = timeClient.getHours() + (minute / 60.0);

  static uint8_t hourAngle = 0;
  static uint8_t minuteAngle = 0;
  static uint8_t secondAngle = 0;

  const float degreesPerSecond = 255.0 / 60.0;
  const float degreesPerMinute = 255.0 / 60.0;
  const float degreesPerHour = 255.0 / 12.0;

  EVERY_N_MILLIS(100) {
    hourAngle = 255 - hour * degreesPerHour;
    minuteAngle = 255 - minute * degreesPerMinute;
    secondAngle = 255 - second * degreesPerSecond;
  }

  drawSpiralLine(secondAngle, step, CRGB(0, 0, 2));
  drawSpiralLine(minuteAngle, step, CRGB(0, 2, 0));
  drawSpiralLine(hourAngle, step, CRGB(2, 0, 0));
}

void drawSpiralAnalogClock13() {
  fadeToBlackBy(leds, NUM_LEDS, clockBackgroundFade);
  drawSpiralAnalogClock(13);
}

void drawSpiralAnalogClock21() {
  fadeToBlackBy(leds, NUM_LEDS, clockBackgroundFade);
  drawSpiralAnalogClock(21);
}

void drawSpiralAnalogClock34() {
  fadeToBlackBy(leds, NUM_LEDS, clockBackgroundFade);
  drawSpiralAnalogClock(34);
}

void drawSpiralAnalogClock55() {
  fadeToBlackBy(leds, NUM_LEDS, clockBackgroundFade);
  drawSpiralAnalogClock(55);
}

void drawSpiralAnalogClock89() {
  fadeToBlackBy(leds, NUM_LEDS, clockBackgroundFade);
  drawSpiralAnalogClock(89);
}

void drawSpiralAnalogClock21and34() {
  fadeToBlackBy(leds, NUM_LEDS, clockBackgroundFade);
  drawSpiralAnalogClock(21);
  drawSpiralAnalogClock(34);
}

void drawSpiralAnalogClock13_21_and_34() {
  float second = timeClient.getSeconds();
  float minute = timeClient.getMinutes() + (second / 60.0);
  float hour = timeClient.getHours() + (minute / 60.0);

  static uint8_t hourAngle = 0;
  static uint8_t minuteAngle = 0;
  static uint8_t secondAngle = 0;

  const float degreesPerSecond = 255.0 / 60.0;
  const float degreesPerMinute = 255.0 / 60.0;
  const float degreesPerHour = 255.0 / 12.0;

  EVERY_N_MILLIS(100) {
    hourAngle = 255 - hour * degreesPerHour;
    minuteAngle = 255 - minute * degreesPerMinute;
    secondAngle = 255 - second * degreesPerSecond;
  }

  fadeToBlackBy(leds, NUM_LEDS, clockBackgroundFade);

  drawSpiralLine(secondAngle, 13, CRGB(0, 0, 2));
  drawSpiralLine(minuteAngle, 21, CRGB(0, 2, 0));
  drawSpiralLine(hourAngle, 34, CRGB(2, 0, 0));
}

void drawSpiralAnalogClock34_21_and_13() {
  float second = timeClient.getSeconds();
  float minute = timeClient.getMinutes() + (second / 60.0);
  float hour = timeClient.getHours() + (minute / 60.0);

  static uint8_t hourAngle = 0;
  static uint8_t minuteAngle = 0;
  static uint8_t secondAngle = 0;

  const float degreesPerSecond = 255.0 / 60.0;
  const float degreesPerMinute = 255.0 / 60.0;
  const float degreesPerHour = 255.0 / 12.0;

  EVERY_N_MILLIS(100) {
    hourAngle = 255 - hour * degreesPerHour;
    minuteAngle = 255 - minute * degreesPerMinute;
    secondAngle = 255 - second * degreesPerSecond;
  }

  fadeToBlackBy(leds, NUM_LEDS, clockBackgroundFade);

  drawSpiralLine(secondAngle, 34, CRGB(0, 0, 2));
  drawSpiralLine(minuteAngle, 21, CRGB(0, 2, 0));
  drawSpiralLine(hourAngle, 13, CRGB(2, 0, 0));
}
